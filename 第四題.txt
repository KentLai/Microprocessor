/* Includes ------------------------------------------------------------------------------------------------*/
#include "ht32.h"
#include "ht32_board.h"
#include "ht32_board_config.h"

/* Private variables ---------------------------------------------------------------------------------------*/
TM_TimeBaseInitTypeDef MCTM_TimeBaseInitStructure;
TM_OutputInitTypeDef MCTM_OutputInitStructure;
MCTM_CHBRKCTRInitTypeDef MCTM_CHBRKCTRInitStructure;

vu32 guKeyState[3];
u16 LED = 0xFFFF;
/* Global functions ----------------------------------------------------------------------------------------*/
/*********************************************************************************************************//**
  * @brief  Main program.
  * @retval None
  ***********************************************************************************************************/
void Delay(u32 cnt) { while(cnt--); } 
void Key_Process(void);

void CKCU_Configuration(void)
{
  CKCU_PeripClockConfig_TypeDef CKCUClock = {{ 0 }};
  CKCUClock.Bit.AFIO       = 1;
  CKCUClock.Bit.MCTM0      = 1;
	CKCUClock.Bit.PB = 1;
  CKCUClock.Bit.PC = 1;
  CKCUClock.Bit.PD = 1;
  CKCUClock.Bit.AFIO = 1;
  CKCUClock.Bit.EXTI = 1;
  CKCU_PeripClockConfig(CKCUClock, ENABLE);
}


void GPIO_Configuration(void)
{
  /* Configure MCTM Channel 0 output pin                                                                    */
  AFIO_GPxConfig(GPIO_PC, AFIO_PIN_1, AFIO_FUN_MCTM_GPTM);

  /* Configure MCTM Break pin                                                                               */
  AFIO_GPxConfig(GPIO_PB, AFIO_PIN_4, AFIO_FUN_MCTM_GPTM);
	
	AFIO_GPxConfig(GPIO_PB,AFIO_PIN_12,AFIO_FUN_GPIO);
  //???Input
  GPIO_DirectionConfig(HT_GPIOB, GPIO_PIN_12, GPIO_DIR_IN);
  //???????????
  GPIO_PullResistorConfig(HT_GPIOB, GPIO_PIN_12, GPIO_PR_DISABLE);
  //??Input??
  GPIO_InputConfig(HT_GPIOB, GPIO_PIN_12, ENABLE);
}

void MCTM_Configuration(void)
{
 /* MCTM Time Base configuration                                                                            */
  MCTM_TimeBaseInitStructure.CounterReload = HTCFG_MCTM_RELOAD - 1;
  MCTM_TimeBaseInitStructure.Prescaler = 4000;
  MCTM_TimeBaseInitStructure.RepetitionCounter = 0;
  MCTM_TimeBaseInitStructure.CounterMode = TM_CNT_MODE_UP;
  MCTM_TimeBaseInitStructure.PSCReloadTime = TM_PSC_RLD_IMMEDIATE;
  TM_TimeBaseInit(HT_MCTM0, &MCTM_TimeBaseInitStructure);

  /* MCTM Channel 0 output configuration                                                                    */
  MCTM_OutputInitStructure.Channel = TM_CH_0;
  MCTM_OutputInitStructure.OutputMode = TM_OM_PWM1;
  MCTM_OutputInitStructure.Control = TM_CHCTL_ENABLE;
  MCTM_OutputInitStructure.ControlN = TM_CHCTL_ENABLE;
  MCTM_OutputInitStructure.Polarity = TM_CHP_NONINVERTED;
  MCTM_OutputInitStructure.PolarityN = TM_CHP_NONINVERTED;
  MCTM_OutputInitStructure.IdleState = MCTM_OIS_LOW;
  MCTM_OutputInitStructure.IdleStateN = MCTM_OIS_HIGH;
	
  MCTM_OutputInitStructure.Channel = TM_CH_0;
  MCTM_OutputInitStructure.Compare = HTCFG_MCTM_RELOAD * 0;
  TM_OutputInit(HT_MCTM0, &MCTM_OutputInitStructure);

  /* MCTM Off State, lock, Break, Automatic Output enable, dead time configuration                          */
  MCTM_CHBRKCTRInitStructure.OSSRState = MCTM_OSSR_STATE_ENABLE;
  MCTM_CHBRKCTRInitStructure.OSSIState = MCTM_OSSI_STATE_ENABLE;
  MCTM_CHBRKCTRInitStructure.LockLevel = MCTM_LOCK_LEVEL_2;
  MCTM_CHBRKCTRInitStructure.Break0 = MCTM_BREAK_ENABLE;
  MCTM_CHBRKCTRInitStructure.Break0Polarity = MCTM_BREAK_POLARITY_LOW;
  MCTM_CHBRKCTRInitStructure.AutomaticOutput = MCTM_CHAOE_ENABLE;
  MCTM_CHBRKCTRInitStructure.DeadTime = HTCFG_MCTM_DEAD_TIME;
  MCTM_CHBRKCTRInitStructure.BreakFilter = 0;
  MCTM_CHBRKCTRConfig(HT_MCTM0, &MCTM_CHBRKCTRInitStructure);

  /* MCTM counter enable                                                                                    */
  TM_Cmd(HT_MCTM0, ENABLE);

  /* MCTM Channel Main Output enable                                                                        */
  MCTM_CHMOECmd(HT_MCTM0, ENABLE);
}
void EXTI_configuration(void)
{
  EXTI_InitTypeDef EXTI_InitStruct;

  AFIO_EXTISourceConfig(AFIO_EXTI_CH_12, AFIO_ESS_PB);
  EXTI_InitStruct.EXTI_Channel=EXTI_CHANNEL_12;
  EXTI_InitStruct.EXTI_Debounce=EXTI_DEBOUNCE_ENABLE;
  EXTI_InitStruct.EXTI_DebounceCnt=32000;
  //for 1ms, 1ms*32MHz=32000
  EXTI_InitStruct.EXTI_IntType=EXTI_POSITIVE_EDGE;
  EXTI_Init(&EXTI_InitStruct);
  EXTI_IntConfig(EXTI_CHANNEL_12, ENABLE);

  AFIO_EXTISourceConfig(AFIO_EXTI_CH_1, AFIO_ESS_PD);
  EXTI_InitStruct.EXTI_Channel=EXTI_CHANNEL_1;
  EXTI_InitStruct.EXTI_IntType=EXTI_NEGATIVE_EDGE;
  EXTI_Init(&EXTI_InitStruct);
  EXTI_IntConfig(EXTI_CHANNEL_1, ENABLE);

  AFIO_EXTISourceConfig(AFIO_EXTI_CH_2, AFIO_ESS_PD);
  EXTI_InitStruct.EXTI_Channel=EXTI_CHANNEL_2;
  EXTI_InitStruct.EXTI_IntType=EXTI_NEGATIVE_EDGE;
  EXTI_Init(&EXTI_InitStruct);
  EXTI_IntConfig(EXTI_CHANNEL_2, ENABLE);
}
void NVIC_configuration(void){
  NVIC_EnableIRQ(EXTI12_IRQn);
  NVIC_EnableIRQ(EXTI1_IRQn);
  NVIC_EnableIRQ(EXTI2_IRQn);

  NVIC_SetPriority(EXTI4_15_IRQn, 0);
  NVIC_SetPriority(EXTI0_1_IRQn, 1);
  NVIC_SetPriority(EXTI2_3_IRQn, 2);  
}
/* Global functions ----------------------------------------------------------------------------------------*/
/*********************************************************************************************************//**
  * @brief  Main program.
  * @retval None
  ***********************************************************************************************************/
int main(void)
{
  int i,j;
  CKCU_Configuration();               /* System Related configuration                                       */
  GPIO_Configuration();               /* GPIO Related configuration                                         */
  MCTM_Configuration();
	EXTI_configuration();//??EXTI??
  NVIC_configuration();//??NVIC??
  //???????LED?(1??,0??)
  GPIO_WriteOutData(HT_GPIOC,0xFFFF);
	
   while (1)                           /* Infinite loop                                                      */
  {
	//????,??LED?
    Key_Process();
  }
}
void Key_Process(void)
{
//?????????,guKeyState[0]???TRUE
	int i,j;
  if (guKeyState[0] == TRUE)
  {
	//????
    guKeyState[0] = FALSE;
	//??XOR????????LED?????,???????
    
       MCTM_OutputInitStructure.Channel = TM_CH_0;
       MCTM_OutputInitStructure.Compare = HTCFG_MCTM_RELOAD * 1/2;
       TM_OutputInit(HT_MCTM0, &MCTM_OutputInitStructure);
			 
		
  }
  
}

